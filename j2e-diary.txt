1、环境变量
	export JAVA_HOME=/usr/local/java
	export CATALINA_HOME=/usr/local/tomcat
	export CATALINA_BASE=$CATALINA_HOME
	export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/jre/lib:$JAVA_HOME/lib
	export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$CATALINA_HOME/bin:$CATALINA_HOME/lib
	
2、使用maven构建mabatis项目
	0、在Properties中添加一个参数archetypeCatalg=internal不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。
  	解释：archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，
	由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。
	1、将下面的 dependency 代码置于 pom.xml 文件中：
		<dependency>
		  <groupId>org.mybatis</groupId>
		  <artifactId>mybatis</artifactId>
		  <version>x.x.x</version>
		</dependency>
	2、构建SqlSessionFactory
	每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为中心的。
	1）SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的 Configuration 的实例构建出 SqlSessionFactory 的实例。
	从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。但是也可以使用任意的输入流(InputStream)实例，包括字符串形式的文件路径或者 file:// 的 URL 形式的文件路径来配置。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，可使从 classpath 或其他位置加载资源文件更加容易。
			String resource = "org/mybatis/example/mybatis-config.xml";
			InputStream inputStream = Resources.getResourceAsStream(resource);
			sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	XML配置文件中包含了对 MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务范围和控制方式的事务管理器（TransactionManager）。XML 配置文件的详细内容后面再探讨，这里先给出一个简单的示例：
			<?xml version="1.0" encoding="UTF-8" ?>
			<!DOCTYPE configuration
			  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
			  "http://mybatis.org/dtd/mybatis-3-config.dtd">
			<configuration>
			  <environments default="development">
			    <environment id="development">
			      <transactionManager type="JDBC"/>
			      <dataSource type="POOLED">
			        <property name="driver" value="${driver}"/>
			        <property name="url" value="${url}"/>
			        <property name="username" value="${username}"/>
			        <property name="password" value="${password}"/>
			      </dataSource>
			    </environment>
			  </environments>
			  <mappers>
			    <mapper resource="org/mybatis/example/BlogMapper.xml"/>
			  </mappers>
			</configuration
			
3、依赖应添加到WEB-INF文件夹，放在外部不会部署到服务器
4、报错：405	HTTP method GET is not supported by this URL
	Servlet中的doGet(),doPost()方法不能调用super.do**
4、操作数据库的方法最好返回布尔类型（如果不需要返回数据）
5、尽量避免返回null，使用内容为空的对象，增加容错
6、DAO模式：
	DAO模式一般也包含单例模式、代理模式和工厂模式
	单例模式：一个类只有一个实例，避免频繁的创建和销毁实例，节省内存开销。
	代理模式：直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。
	工厂模式：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
	DAO模式包括六个部分：
	1）DBConnectionManager，管理数据库连接，单例；
	2）VO，VO类就是一个java bean的实体类，对应一张数据表，包括关系表。每一个VO对象对应表中的一条记录；
	3）DAO，定义操作接口；
	4）Impl，DAO接口的实现类；
	5）Proxy，代理实现类，管理数据库的开闭，调用Impl对象的真实操作；
	6）Factory，取得DAO的实例化对象。	
7、位运算与逻辑运算在逻辑判断中有所不同（以||和|为例）
	a||b:a为true时，b不会得到执行
	a|b:a和b的真值都会得到判断
	在下列情况下使用|容易出现空对象：
	List list=getList();while(list==null|list.get(0)==null)
8、maven打包.war文件部署到tomcat
        1）打包.war: VIEW->TOOL WINDOWS->MARVEN PROJECTS->
